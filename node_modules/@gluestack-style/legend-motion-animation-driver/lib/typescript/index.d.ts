import type { IAnimationDriverPlugin, IAnimationResolver } from '@gluestack-style/react';
import React from 'react';
export declare class MotionAnimationDriver implements IAnimationDriverPlugin {
    name: 'MotionAnimationDriver';
    engine: {
        Pressable: React.ComponentType<React.ForwardRefExoticComponent<import("react-native").PressableProps & React.RefAttributes<import("react-native").View>>>;
        AnimatePresence: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<unknown>>;
        View: <TAnimate, TAnimateProps>(p: import("react-native").Animated.AnimatedProps<import("react-native").ViewProps & React.RefAttributes<import("react-native").View>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").View, import("react-native").ViewStyle, TAnimate, TAnimateProps, unknown>, ref: React.Ref<import("react-native").View>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        Text: <TAnimate_1, TAnimateProps_1>(p: import("react-native").Animated.AnimatedProps<import("react-native").TextProps & React.RefAttributes<import("react-native").Text>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").Text, import("react-native").TextStyle, TAnimate_1, TAnimateProps_1, unknown>, ref: React.Ref<import("react-native").Text>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        FlatList: <TAnimate_2, TAnimateProps_2>(p: import("react-native").Animated.AnimatedProps<import("react-native").Animated.AnimatedProps<import("react-native").FlatListProps<unknown>> & React.RefAttributes<import("react-native").Animated.FlatList<unknown>>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").Animated.FlatList, import("react-native").Animated.Value | import("react-native").Animated.AnimatedInterpolation | import("react-native").Animated.WithAnimatedObject<import("react-native").ViewStyle>, TAnimate_2, TAnimateProps_2, unknown>, ref: React.Ref<import("react-native").Animated.FlatList<unknown>>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        Image: <TAnimate_3, TAnimateProps_3>(p: import("react-native").Animated.AnimatedProps<import("react-native").ImageProps & React.RefAttributes<import("react-native").Image>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").Image, import("react-native").ImageStyle, TAnimate_3, TAnimateProps_3, unknown>, ref: React.Ref<import("react-native").Image>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        ScrollView: <TAnimate_4, TAnimateProps_4>(p: import("react-native").Animated.AnimatedProps<import("react-native").ScrollViewProps & React.RefAttributes<import("react-native").ScrollView>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").ScrollView, import("react-native").ViewStyle, TAnimate_4, TAnimateProps_4, unknown>, ref: React.Ref<import("react-native").ScrollView>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        SectionList: <TAnimate_5, TAnimateProps_5>(p: import("react-native").Animated.AnimatedProps<import("react-native").Animated.AnimatedProps<import("react-native").SectionListProps<unknown, unknown>> & React.RefAttributes<import("react-native").Animated.SectionList<unknown, unknown>>> & import("@legendapp/motion").MotionComponentProps<typeof import("react-native").Animated.SectionList, import("react-native").Animated.Value | import("react-native").Animated.AnimatedInterpolation | import("react-native").Animated.WithAnimatedObject<import("react-native").ViewStyle>, TAnimate_5, TAnimateProps_5, unknown>, ref: React.Ref<import("react-native").Animated.SectionList<unknown, unknown>>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
    };
    config: {
        aliases: {
            readonly ':animate': "animate";
            readonly ':initial': "initial";
            readonly ':exit': "exit";
            readonly ':initialProps': "initialProps";
            readonly ':animateProps': "animateProps";
            readonly ':transition': "transition";
            readonly ':transformOrigin': "transformOrigin";
            readonly ':whileTap': "whileTap";
            readonly ':whileHover': "whileHover";
            readonly ':onAnimationComplete': "onAnimationComplete";
        };
    };
    register(config: any): void;
    constructor(config?: IAnimationResolver);
}
//# sourceMappingURL=index.d.ts.map