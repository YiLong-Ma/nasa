"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MotionAnimationDriver = void 0;
var _react = require("@gluestack-style/react");
var _react2 = _interopRequireWildcard(require("react"));
var _utils = require("./utils");
var _motion = require("@legendapp/motion");
var _propertyTokenMap = require("./propertyTokenMap");
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function tokenizeAnimationPropsFromConfig() {
  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let config = arguments.length > 1 ? arguments[1] : undefined;
  let animationAliases = arguments.length > 2 ? arguments[2] : undefined;
  let path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  let tokenizedAnimatedProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  for (const prop in props) {
    if (Array.isArray(props[prop])) {
      path.push(prop);
      (0, _utils.setObjectKeyValue)(tokenizedAnimatedProps, path, props[prop]);
      path.pop();
    } else if (animationAliases[prop]) {
      path.push(prop);
      const tokenizedValue = (0, _utils.resolvedTokenization)(props[prop], config);
      (0, _utils.setObjectKeyValue)(tokenizedAnimatedProps, path, tokenizedValue);
      path.pop();
    } else if (typeof props[prop] === 'object') {
      path.push(prop);
      const tokenizedValue = (0, _utils.resolvedTokenization)(props[prop], config);
      (0, _utils.setObjectKeyValue)(tokenizedAnimatedProps, path, tokenizedValue);
      // path.pop();
      tokenizeAnimationPropsFromConfig(props[prop], config, animationAliases, path, tokenizedAnimatedProps);
      path.pop();
    } else {
      path.push(prop);
      (0, _utils.setObjectKeyValue)(tokenizedAnimatedProps, path, props[prop]);
      path.pop();
    }
  }
  return tokenizedAnimatedProps;
}
function getVariantProps(props, theme) {
  const variantTypes = theme !== null && theme !== void 0 && theme.variants ? Object.keys(theme.variants) : [];
  const restProps = {
    ...props
  };
  const variantProps = {};
  variantTypes === null || variantTypes === void 0 || variantTypes.forEach(variant => {
    if (props[variant]) {
      variantProps[variant] = props[variant];
      // delete restProps[variant];
    }
  });

  return {
    variantProps,
    restProps
  };
}
function resolveVariantAnimationProps(variantProps, styledObject) {
  let resolvedVariant = {};
  Object.keys(variantProps).forEach(variant => {
    var _styledObject$variant;
    const variantValue = variantProps[variant];
    const variantObject = styledObject === null || styledObject === void 0 || (_styledObject$variant = styledObject.variants) === null || _styledObject$variant === void 0 || (_styledObject$variant = _styledObject$variant[variant]) === null || _styledObject$variant === void 0 ? void 0 : _styledObject$variant[variantValue];
    resolvedVariant = (0, _utils.deepMerge)(resolvedVariant, variantObject);
  });
  return resolvedVariant;
}
const AnimatePresence = /*#__PURE__*/_react2.default.forwardRef((_ref, ref) => {
  let {
    children,
    ...props
  } = _ref;
  const ctx = (0, _react.useStyled)();
  const clonedChildren = [];
  const CONFIG = (0, _react2.useMemo)(() => ({
    ...ctx.config,
    propertyTokenMap: _propertyTokenMap.propertyTokenMap
  }), [ctx.config]);
  _react2.default.Children.toArray(children).forEach(child => {
    var _child$type, _child$type2, _child$type3;
    if (child !== null && child !== void 0 && (_child$type = child.type) !== null && _child$type !== void 0 && _child$type.displayName && child !== null && child !== void 0 && (_child$type2 = child.type) !== null && _child$type2 !== void 0 && _child$type2.displayName.includes('Gluestack-AnimatedResolver') || child !== null && child !== void 0 && (_child$type3 = child.type) !== null && _child$type3 !== void 0 && _child$type3.isStyledComponent) {
      var _child$type4, _child$props, _mergedAnimatedProps$;
      let tokenizedAnimatedProps = {};
      const animationAliases = {};
      const componentStyledObject = child === null || child === void 0 || (_child$type4 = child.type) === null || _child$type4 === void 0 || (_child$type4 = _child$type4.getStyledData()) === null || _child$type4 === void 0 ? void 0 : _child$type4.config;
      const {
        variantProps,
        restProps
      } = getVariantProps(child === null || child === void 0 ? void 0 : child.props, componentStyledObject);
      const config = CONFIG;
      const variantStyledObject = resolveVariantAnimationProps(variantProps, componentStyledObject);
      const componentStyledObjectWithVariants = (0, _utils.deepMergeObjects)(componentStyledObject, variantStyledObject);
      tokenizedAnimatedProps = tokenizeAnimationPropsFromConfig(componentStyledObjectWithVariants, config, animationAliases);
      const tokenizedSxAnimationProps = tokenizeAnimationPropsFromConfig(child === null || child === void 0 || (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.sx, config, animationAliases);
      const mergedAnimatedProps = (0, _utils.deepMergeObjects)({}, tokenizedSxAnimationProps, tokenizedAnimatedProps);
      const clonedChild = /*#__PURE__*/_react2.default.cloneElement(child, {
        ...restProps,
        exit: mergedAnimatedProps === null || mergedAnimatedProps === void 0 || (_mergedAnimatedProps$ = mergedAnimatedProps.baseStyle) === null || _mergedAnimatedProps$ === void 0 ? void 0 : _mergedAnimatedProps$[':exit']
      });
      clonedChildren.push(clonedChild);
    } else {
      clonedChildren.push(child);
    }
  });
  return /*#__PURE__*/_react2.default.createElement(_motion.AnimatePresence, _extends({
    ref: ref
  }, props), clonedChildren);
});
const AnimatedPressable = (0, _motion.createMotionAnimatedComponent)(_reactNative.Pressable);
class MotionAnimationDriver {
  engine = {
    ..._motion.Motion,
    Pressable: AnimatedPressable,
    AnimatePresence
  };
  config = {
    aliases: {
      ':animate': 'animate',
      ':initial': 'initial',
      ':exit': 'exit',
      ':initialProps': 'initialProps',
      ':animateProps': 'animateProps',
      ':transition': 'transition',
      ':transformOrigin': 'transformOrigin',
      ':whileTap': 'whileTap',
      ':whileHover': 'whileHover',
      ':onAnimationComplete': 'onAnimationComplete'
    }
  };
  register(config) {
    if (this.config) {
      var _this$config, _this$config2;
      this.config.aliases = {
        ...((_this$config = this.config) === null || _this$config === void 0 ? void 0 : _this$config.aliases),
        ...(config === null || config === void 0 ? void 0 : config.aliases)
      };

      // @ts-ignore
      this.config.tokens = {
        // @ts-ignore
        ...((_this$config2 = this.config) === null || _this$config2 === void 0 ? void 0 : _this$config2.tokens),
        ...(config === null || config === void 0 ? void 0 : config.tokens)
      };

      // @ts-ignore
      this.config.ref = config === null || config === void 0 ? void 0 : config.ref;
    }
  }
  constructor(config) {
    this.register(config);
    this.name = 'MotionAnimationDriver';
    this.engine.AnimatePresence.defaultProps = {
      ...this.engine.AnimatePresence.defaultProps,
      config
    };
  }
}
exports.MotionAnimationDriver = MotionAnimationDriver;
//# sourceMappingURL=index.js.map